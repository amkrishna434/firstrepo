apply plugin: 'com.android.application'
apply plugin: 'findbugs'
apply plugin: 'pmd'
apply plugin:'jacoco'
jacoco {
    toolVersion = "0.7.1.201405082137"
}

def coverageSourceDirs = [
        'C:\jenkins\workspace\Multicooker_Android\Multicooker\app\src\main\java'
]

android {
    compileSdkVersion 22
    buildToolsVersion "23.0.2"

    signingConfigs {
        release
    }

    defaultConfig {
        applicationId "C:\jenkins\workspace\Multicooker_Android\Multicooker\app\src\test\java\com\philips\cl\di\ka\multicooker"
        minSdkVersion 15
        targetSdkVersion 18
        multiDexEnabled true
        testApplicationId "C:\jenkins\workspace\Multicooker_Android\Multicooker\app\src\test\java\com\philips\cl\di\ka\multicooker.test"
        testInstrumentationRunner "com.zutubi.android.junitreport.JUnitReportTestRunner"
    }
    packagingOptions{
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'

    }

    dexOptions {
        javaMaxHeapSize "4g"
    }
    
    lintOptions {
          abortOnError false
      }


    


    buildTypes {
        release {
            minifyEnabled true
            signingConfig signingConfigs.release
            proguardFiles 'proguard-project.txt'
        }

        debug {
            debuggable true
            testCoverageEnabled true
        }
    }

    productFlavors {
        simulator {
            applicationId 'C:\jenkins\workspace\Multicooker_Android\Multicooker\app\src\test\java\com\philips\cl\di\ka\multicooker'
            versionCode 14
            versionName "1.0.3"
        }
        device {
            applicationId 'C:\jenkins\workspace\Multicooker_Android\Multicooker\app\src\test\java\com\philips\cl\di\ka\multicookers'
            versionCode 14
            versionName "1.0.3"
        }
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }
}

def Properties props = new Properties()
def propFile = new File('signing.properties')
if (propFile.canRead()){
    props.load(new FileInputStream(propFile))

    if (props!=null && props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') &&
            props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {
        android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
        android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
        android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
        android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
    } else {
        println 'signing.properties found but some entries are missing'
        android.buildTypes.release.signingConfig = null
    }
}else {
    println 'signing.properties not found'
    android.buildTypes.release.signingConfig = null
}

repositories {
    flatDir {
        dirs 'libs'
    }
}

dependencies {
    compile 'com.android.support:appcompat-v7:22.2.0'
    compile 'com.android.support:support-v4:22.2.0'
    compile 'com.google.android.gms:play-services:7.8.0'
    compile 'com.android.support:multidex:1.0.1'
    compile files('libs/httpmime-4.1.3.jar')
    compile files('libs/jackson-core-asl-1.9.11.jar')
    compile files('libs/jackson-mapper-asl-1.9.11.jar')
    compile files('libs/universal-image-loader-1.9.2.jar')
    compile files('libs/gson-2.2.4.jar')
    androidTestCompile files('libs/dexmaker-1.0.jar')
    androidTestCompile files('libs/dexmaker-mockito-1.0.jar')
    androidTestCompile files('libs/mockito-all-1.9.5.jar')
    compile(name: 'jump-v5.0.0', ext: 'aar')
    compile(name: 'localeMatch-v1.0.3', ext: 'aar')
    compile(name: 'registrationApi-v3.0.0', ext: 'aar')
    compile files('libs/org.apache.http.legacy.jar')
    compile(name: 'digitalCare-v2.1.0', ext: 'aar')
    compile(name: 'bvsdk', ext: 'aar')
    compile(name: 'dicommClientLib-release', ext: 'aar')
    compile files('libs/adobeMobileLibrary-v4.5.1.jar')

    androidTestCompile files('libs/junit-4.12.jar')
    testCompile files('libs/junit-4.12.jar')
    testCompile files('libs/mockito-all-1.10.19.jar')
    testCompile files('libs/powermock-mockito-1.6.2-full.jar')
    testCompile files('libs/objenesis-2.1.jar')
    testCompile files('libs/javassist-3.19.0-GA.jar')

}

task findbugs(type: FindBugs, dependsOn: assembleDebug) {

    description 'Run findbugs'
    group 'verification'
    ignoreFailures = true
    classes = fileTree('build/intermediates/classes/simulator/debug/com/philips/cl/di/ka/multicooker')
    source = fileTree('src/main/java')
    classpath = files()

    effort = 'max'

    excludeFilter = file("findbugs-exclude.xml")

    reports {
        xml.enabled = true
        html.enabled = false
    }
}

task pmd(type: Pmd, dependsOn: assembleDebug) {

    description 'Run pmd'
    group 'verification'
    ignoreFailures = true
    ruleSets = ["rules/basic.xml", "rules/android.xml", "rules/empty.xml", "rules/imports.xml", "rules/unnecessary.xml", "rules/unusedcode.xml"]
    source = fileTree('src/main/java')

    reports {
        xml.enabled = true
        html.enabled = false
    }


}

task jacocoTestReport(type:JacocoReport, dependsOn: "testDebug") {
    group = "Reporting"

    description = "Generate Jacoco coverage reports"

    classDirectories = fileTree(
            dir: '../app/build/intermediates/classes/debug',
            excludes: ['**/R.class',
                       '**/R$*.class',
                       '**/*$ViewInjector*.*',
                       '**/BuildConfig.*',
                       '**/Manifest*.*']
    )

    additionalSourceDirs = files(coverageSourceDirs)
    sourceDirectories = files(coverageSourceDirs)
    executionData = files('../app/build/jacoco/testDebug.exec')

    reports {
        xml.enabled = true
        html.enabled = true
    }

}